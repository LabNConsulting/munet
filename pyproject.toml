[project]
name = "munet"
version = "0.16.0"
description = "A package to facilitate network simulations"
readme = {file = "README.org", content-type = "text/plain"}
requires-python = ">=3.9"
license = {text = "GPL-2.0-or-later"}
authors = [{name = "Christian Hopps", email = "chopps@labn.net"}]
urls = {Repository = "https://github.com/LabNConsulting/munet"}
dependencies = [
  # "deepdiff>=8.4.2",
  "deepdiff>=6.2.1,<8.0.0", # +8.0.0 causes another deepdiff json cmp issue
  "jsonschema>=4.23.0",
  "pexpect>=4.9.0",
  "pyyaml>=6.0.3",
]
#"toml>=0.10.2,<0.11.0",

include = ["logconf.yaml", "logconf-mutest.yaml", "munet-schema.json"]
[project.scripts]
munet = "munet.__main__:main"
mucmd = "munet.mucmd:main"
mutini = "munet.mutini:main"
mushare = "munet.mutestshare:main"
mutest = "munet.mutest.__main__:main"

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"
# requires = ["uv-build>=0.1"]   # package name for the backend
# build-backend = "uv_build"

[dependency-groups]
dev = [
    "autoflake>=2.3.1",
    "black>=25.9.0",
    "jsonschema>=4.25.1",
    "pyang>=2.7.1",
    "pyang-json-schema-plugin @ git+https://github.com/LabNConsulting/pyang-json-schema-plugin.git@labn-master",
    "pydocstyle>=6.3.0",
    "pylint>=3.3.8",
    "pytest>=8.4.2",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=7.0.0",
    "pytest-xdist>=3.8.0",
    "requests>=2.32.5",
    "setuptools",
    "sphinx>=7.4.7",
    "sphinx-prompt>=1.8.0",
    "toml>=0.10.2",
]

ide = [
    "basedpyright>=1.31.5",
    "importmagic>=0.1.7",
    "isort>=6.0.1",
    "python-lsp-server[all]>=1.13.1",
]

[tool.isort]
profile = "black"
force_single_line = true
atomic = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
src_paths = ["munet", "tests"]
skip_glob = ["*/setup.py"]
filter_files = true
known_first_party = "munet"

[tool.black]
line-length = 88
include = '\\.(pyi?)$'
exclude = '''
/(
\\.eggs
| \\.git
| \\.hg
| \\.mypy_cache
| \\.tox
| \\.venv
| _build
| buck-out
| build
| dist
| tests/.*/setup.py
)/
'''

[tool.flake8]
max-line-length = 88
ignore = "E203,E741,W504"

[tool.pylint.messages_control]
disable = [
"broad-except",
"broad-exception-raised",
"consider-using-f-string",    # this would also be nice, but too much
"consider-using-with",        # this would be nice if it wasn't so simple
"duplicate-code",
"fixme",
"invalid-name",               # sometimes 1 char variable names are fine
"missing-function-docstring", # would be nice, a pipe-dream really
"too-few-public-methods",
"too-many-arguments",
"too-many-branches",
"too-many-instance-attributes",
"too-many-lines",
"too-many-locals",
"too-many-positional-arguments",
"too-many-return-statements",
"too-many-statements",
"unknown-option-value",
]
max-line-length = 88

[tool.pydocstyle]
convention = "google"
add_ignore = "D102,D103,D105,D107"

[tool.pylint.design]
max-returns = 8

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = [
        "tests",
]
log_level = "INFO"
log_format = "%(asctime)s,%(msecs)03d %(levelname)s: %(name)s: %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
python_functions = ["test*"]
log_cli_level = "INFO"
log_cli_format = "%(asctime)s,%(msecs)03d %(levelname)s: %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "exec-pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s,%(msecs)03d %(levelname)s: %(name)s: %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

