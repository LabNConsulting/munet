[tool.poetry]
name = "munet"
version = "0.15.6"
description = "A package to facilitate network simulations"
authors = ["Christian Hopps <chopps@labn.net>"]
license = "GPL-2.0-or-later"
readme = "README.org"
repository = "https://github.com/LabNConsulting/munet"

include = ["logconf.yaml", "logconf-mutest.yaml", "munet-schema.json"]

[tool.poetry.dependencies]
python = "^3.8"
deepdiff = "^6.2.1"
pexpect = "^4.8.0"
pyyaml = "^6.0"
jsonschema = "^4.17.1"
toml = {version = "^0.10.2", optional = true}

[tool.poetry.scripts]
munet = "munet.__main__:main"
mucmd = "munet.mucmd:main"
mutini = "munet.mutini:main"
mushare = "munet.mutestshare:main"
mutest = "munet.mutest.__main__:main"

[tool.poetry.group.schemadev.dependencies]
pyang = "^2.5.3"
pyang-json-schema-plugin = {git = "https://github.com/LabNConsulting/pyang-json-schema-plugin.git", rev = "labn-master"}

[tool.poetry.group.test.dependencies]
pylint = "^2.15.6"
pytest = "^7.1.3"
pytest-asyncio = "^0.20.2"
pytest-cov = "^4.0.0"
requests = "^2.28.1"
toml = "^0.10.2"
pytest-xdist = "^3.0.2"


[tool.poetry.group.ide.dependencies]
autoflake = "^1.7.7"
black = "^22.10.0"
importmagic = "^0.1.7"
isort = "^5.10.1"
pylint = "^2.15.6"
astunparse = "^1.6.3"
python-lsp-server = {extras = ["flake8", "pydocstyle", "pylint"], version = "^1.6.0"}


[tool.poetry.group.doc.dependencies]
sphinx = "^5.3.0"
python-docs-theme = "^2022.1"
sphinx-prompt = "^1.5.0"

[tool.isort]
profile = "black"
force_single_line = true
atomic = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
src_paths = ["munet", "tests"]
skip_glob = ["*/setup.py"]
filter_files = true
known_first_party = "munet"

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.poetryvenv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/setup.py
)/
'''

[build-system]
requires = ["poetry-core>=1.0.8"]
build-backend = "poetry.core.masonry.api"

[tool.flake8]
max-line-length = 88
ignore = "E203,E741,W504"

[tool.pylint.messages_control]
disable = [
  "broad-except",
  "broad-exception-raised",
  "consider-using-f-string",    # this would also be nice, but too much
  "consider-using-with",        # this would be nice if it wasn't so simple
  "duplicate-code",
  "fixme",
  "invalid-name",               # sometimes 1 char variable names are fine
  "missing-function-docstring", # would be nice, a pipe-dream really
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-return-statements",
  "too-many-statements",
  "unknown-option-value",
]
max-line-length = 88

[tool.pydocstyle]
convention = "google"
add_ignore = "D102,D103,D105,D107"

[tool.pylint.design]
# limiting the number of returns might discourage
# the use of guard clauses. So we increase the
# allowed number of returns from 6 to 8
max-returns = 8

[tool.pytest.ini_options]

asyncio_mode = "auto"

testpaths = [
        "tests",
]

log_level = "INFO"
log_format = "%(asctime)s,%(msecs)03d %(levelname)s: %(name)s: %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

python_functions = ["test*"]
# python_files = ["test*.py"]

# If verbose is specifyied log_cli will be set to 1, it can also be specified
# here or on the CLI.
# log_cli = 1
log_cli_level = "INFO"
log_cli_format = "%(asctime)s,%(msecs)03d %(levelname)s: %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

log_file = "exec-pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s,%(msecs)03d %(levelname)s: %(name)s: %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
